name: Netlify Github workflow sandbox

on:
  pull_request:
    types: [opened, ready_for_review, reopened, synchronize, closed]

env:
  GITHUB_ENVIRONMENT_NAME: PR_${{ github.event.pull_request.number }}

concurrency:
  group: pr-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  netlify:
    if: github.event_name == 'pull_request' && contains(fromJSON('["opened", "ready_for_review", "reopened"]'), github.event.action)
    runs-on: ubuntu-latest
    environment: PR_${{ github.event.pull_request.number }}
    steps:
    - name: Add current branch to Netlify ðŸŒ²
      env:
        BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
      run: |
        GET_SITE_DATA=$(jq -n \
                          --arg site_id "$NETLIFY_SITE_ID" \
                          '{ $site_id }')
        NETLIFY_SITE_CONFIG=$(netlify api getSite --data "${GET_SITE_DATA}")
        ALLOWED_BRANCHES=$(jq '.build_settings.allowed_branches' <<< ${NETLIFY_SITE_CONFIG})
        echo "Allowed Branches: ${ALLOWED_BRANCHES}"

        if [ ! $(jq '.[]|select(index("${BRANCH_NAME}"))' <<< "${ALLOWED_BRANCHES}") = "${BRANCH_NAME}" ]; then
          echo "Adding ${BRANCH_NAME} to Netlify allowed_branches"
          UPDATED_ALLOWED_BRANCHES=$(jq -c ".[. | length] |= .+ \"${BRANCH_NAME}\"" <<< "${ALLOWED_BRANCHES}")
          echo "Updated Allowed Branches: ${UPDATED_ALLOWED_BRANCHES}"
          UPDATE_SITE_DATA=$(jq -n \
                                --arg site_id "$NETLIFY_SITE_ID" \
                                --arg uab "$UPDATED_ALLOWED_BRANCHES" \
                                '{ $site_id, body: { build_settings: { allowed_branches: $uab } } }')
          UPDATED_SITE_CONFIG=$(netlify api updateSite --data "${UPDATE_SITE_DATA}")
        else
          echo "${BRANCH_NAME} is already in Netlify allowed_branches"
        fi

    - name: Add branch env var to Netlify ðŸ“Ž
      env:
        BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
        NETLIFY_ACCOUNT_ID: ${{ secrets.NETLIFY_ACCOUNT_ID }}
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
      run: |
        SET_ENV_DATA=$(jq -n \
                          --arg account_id "$NETLIFY_ACCOUNT_ID" \
                          --arg site_id "$NETLIFY_SITE_ID" \
                          --arg bn "$BRANCH_NAME" \
                          --arg value "neato" \
                          '{ $account_id, key: "test_env_var", $site_id, body: { context: "branch", context_parameter: $bn, $value } }')
        UPDATED_ENV_CONFIG=$(netlify api setEnvVarValue --data "${SET_ENV_DATA}")

  cleanup:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    steps:
    - name: Delete branch env vars from Netlify ðŸ—‘
      env:
        BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
        NETLIFY_ACCOUNT_ID: ${{ secrets.NETLIFY_ACCOUNT_ID }}
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
      run: |
        GET_ENV_DATA=$(jq -n \
                          --arg account_id "$NETLIFY_ACCOUNT_ID" \
                          --arg site_id "$NETLIFY_SITE_ID" \
                          '{ $account_id, $site_id, context_name: "branch" }')
        NETLIFY_ENV_VARS=$(netlify api getEnvVars --data "${GET_ENV_DATA}")
        echo "NETLIFY_ENV_VARS: $NETLIFY_ENV_VARS"

        VAR_IDS_TO_DELETE=$(jq --arg bn "$BRANCH_NAME" '.[].values[] | select(.context_parameter==$bn) | .id')
        echo "VAR_IDS_TO_DELETE: $VAR_IDS_TO_DELETE"

        # DELETE_ENV_DATA=$(jq -n \
        #                       --arg account_id "$NETLIFY_ACCOUNT_ID" \
        #                       --arg value "neato" \
        #                       '{ $account_id, key: "test_env_var", $site_id, body: { context: "branch", context_parameter: $bn, $value } }')
        # netlify api deleteEnvVarValue --data "${DELETE_ENV_DATA}"
